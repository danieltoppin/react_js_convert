{"ast":null,"code":"import _slicedToArray from \"/Users/gbdantop/Downloads/app-store-ui-using-react-and-framer-motion/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n/**\n * Calculate the top/bottom scroll constraints of a full-screen element vs the viewport\n */\nexport function useScrollConstraints(ref, measureConstraints) {\n  var _useState = useState({\n      top: 0,\n      bottom: 0\n    }),\n    _useState2 = _slicedToArray(_useState, 2),\n    constraints = _useState2[0],\n    setConstraints = _useState2[1];\n  useEffect(function () {\n    if (!measureConstraints) return;\n    var element = ref.current;\n    var viewportHeight = window.innerHeight;\n    var contentTop = element.offsetTop;\n    var contentHeight = element.offsetHeight;\n    var scrollableViewport = viewportHeight - contentTop * 2;\n    var top = Math.min(scrollableViewport - contentHeight, 0);\n    setConstraints({\n      top: top,\n      bottom: 0\n    });\n  }, [measureConstraints]);\n  return constraints;\n}","map":{"version":3,"names":["useState","useEffect","useScrollConstraints","ref","measureConstraints","top","bottom","constraints","setConstraints","element","current","viewportHeight","window","innerHeight","contentTop","offsetTop","contentHeight","offsetHeight","scrollableViewport","Math","min"],"sources":["/Users/gbdantop/Downloads/app-store-ui-using-react-and-framer-motion/src/utils/use-scroll-constraints.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\ninterface Constraints {\n  top: number;\n  bottom: number;\n}\n\n/**\n * Calculate the top/bottom scroll constraints of a full-screen element vs the viewport\n */\nexport function useScrollConstraints(ref, measureConstraints: boolean) {\n  const [constraints, setConstraints] = useState<Constraints>({\n    top: 0,\n    bottom: 0\n  });\n\n  useEffect(() => {\n    if (!measureConstraints) return;\n\n    const element = ref.current;\n    const viewportHeight = window.innerHeight;\n    const contentTop = element.offsetTop;\n    const contentHeight = element.offsetHeight;\n    const scrollableViewport = viewportHeight - contentTop * 2;\n    const top = Math.min(scrollableViewport - contentHeight, 0);\n\n    setConstraints({ top, bottom: 0 });\n  }, [measureConstraints]);\n\n  return constraints;\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAO3C;AACA;AACA;AACA,OAAO,SAASC,oBAAoB,CAACC,GAAG,EAAEC,kBAA2B,EAAE;EAAA,gBAC/BJ,QAAQ,CAAc;MAC1DK,GAAG,EAAE,CAAC;MACNC,MAAM,EAAE;IACV,CAAC,CAAC;IAAA;IAHKC,WAAW;IAAEC,cAAc;EAKlCP,SAAS,CAAC,YAAM;IACd,IAAI,CAACG,kBAAkB,EAAE;IAEzB,IAAMK,OAAO,GAAGN,GAAG,CAACO,OAAO;IAC3B,IAAMC,cAAc,GAAGC,MAAM,CAACC,WAAW;IACzC,IAAMC,UAAU,GAAGL,OAAO,CAACM,SAAS;IACpC,IAAMC,aAAa,GAAGP,OAAO,CAACQ,YAAY;IAC1C,IAAMC,kBAAkB,GAAGP,cAAc,GAAGG,UAAU,GAAG,CAAC;IAC1D,IAAMT,GAAG,GAAGc,IAAI,CAACC,GAAG,CAACF,kBAAkB,GAAGF,aAAa,EAAE,CAAC,CAAC;IAE3DR,cAAc,CAAC;MAAEH,GAAG,EAAHA,GAAG;MAAEC,MAAM,EAAE;IAAE,CAAC,CAAC;EACpC,CAAC,EAAE,CAACF,kBAAkB,CAAC,CAAC;EAExB,OAAOG,WAAW;AACpB"},"metadata":{},"sourceType":"module"}