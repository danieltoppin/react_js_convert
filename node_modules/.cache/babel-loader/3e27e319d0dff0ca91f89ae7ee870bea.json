{"ast":null,"code":"import _objectSpread from \"/Users/gbdantop/Downloads/app-store-ui-using-react-and-framer-motion/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _this = this,\n  _jsxFileName = \"/Users/gbdantop/Downloads/app-store-ui-using-react-and-framer-motion/src/Card/Title.tsx\";\nimport * as React from \"react\";\nimport { motion, useInvertedScale } from \"framer-motion\";\nimport { closeSpring, openSpring } from \"./animations\";\nexport var Title = function Title(_ref) {\n  var title = _ref.title,\n    category = _ref.category,\n    isSelected = _ref.isSelected;\n  var inverted = useInvertedScale();\n  var x = isSelected ? 30 : 15;\n  var y = x;\n  return /*#__PURE__*/React.createElement(motion.div, {\n    className: \"title-container\",\n    initial: false,\n    animate: {\n      x: x,\n      y: y\n    },\n    transition: isSelected ? openSpring : closeSpring,\n    transformTemplate: scaleTranslate,\n    style: _objectSpread({}, inverted, {\n      originX: 0,\n      originY: 0\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"category\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, category), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, title));\n};\n\n/**\n * `transform` is order-dependent, so if you scale(0.5) before translateX(100px),\n * the visual translate will only be 50px.\n *\n * The intuitive pattern is to translate before doing things like scale and\n * rotate that will affect the coordinate space. So Framer Motion takes an\n * opinion on that and allows you to animate them\n * individually without having to write a whole transform string.\n *\n * However in this component we're doing something novel by inverting\n * the scale of the parent component. Because of this we want to translate\n * through scaled coordinate space, and can use the transformTemplate prop to do so.\n */\nvar scaleTranslate = function scaleTranslate(_ref2) {\n  var x = _ref2.x,\n    y = _ref2.y,\n    scaleX = _ref2.scaleX,\n    scaleY = _ref2.scaleY;\n  return \"scaleX(\".concat(scaleX, \") scaleY(\").concat(scaleY, \") translate(\").concat(x, \", \").concat(y, \") translateZ(0)\");\n};","map":{"version":3,"names":["React","motion","useInvertedScale","closeSpring","openSpring","Title","title","category","isSelected","inverted","x","y","scaleTranslate","originX","originY","scaleX","scaleY"],"sources":["/Users/gbdantop/Downloads/app-store-ui-using-react-and-framer-motion/src/Card/Title.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { motion, useInvertedScale } from \"framer-motion\";\nimport { closeSpring, openSpring } from \"./animations\";\n\nexport const Title = ({ title, category, isSelected }) => {\n  const inverted = useInvertedScale();\n  const x = isSelected ? 30 : 15;\n  const y = x;\n\n  return (\n    <motion.div\n      className=\"title-container\"\n      initial={false}\n      animate={{ x, y }}\n      transition={isSelected ? openSpring : closeSpring}\n      transformTemplate={scaleTranslate}\n      style={{ ...inverted, originX: 0, originY: 0 }}\n    >\n      <span className=\"category\">{category}</span>\n      <h2>{title}</h2>\n    </motion.div>\n  );\n};\n\n/**\n * `transform` is order-dependent, so if you scale(0.5) before translateX(100px),\n * the visual translate will only be 50px.\n *\n * The intuitive pattern is to translate before doing things like scale and\n * rotate that will affect the coordinate space. So Framer Motion takes an\n * opinion on that and allows you to animate them\n * individually without having to write a whole transform string.\n *\n * However in this component we're doing something novel by inverting\n * the scale of the parent component. Because of this we want to translate\n * through scaled coordinate space, and can use the transformTemplate prop to do so.\n */\nconst scaleTranslate = ({ x, y, scaleX, scaleY }) =>\n  `scaleX(${scaleX}) scaleY(${scaleY}) translate(${x}, ${y}) translateZ(0)`;\n"],"mappings":";;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,EAAEC,gBAAgB,QAAQ,eAAe;AACxD,SAASC,WAAW,EAAEC,UAAU,QAAQ,cAAc;AAEtD,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAK,OAAwC;EAAA,IAAlCC,KAAK,QAALA,KAAK;IAAEC,QAAQ,QAARA,QAAQ;IAAEC,UAAU,QAAVA,UAAU;EACjD,IAAMC,QAAQ,GAAGP,gBAAgB,EAAE;EACnC,IAAMQ,CAAC,GAAGF,UAAU,GAAG,EAAE,GAAG,EAAE;EAC9B,IAAMG,CAAC,GAAGD,CAAC;EAEX,oBACE,oBAAC,MAAM,CAAC,GAAG;IACT,SAAS,EAAC,iBAAiB;IAC3B,OAAO,EAAE,KAAM;IACf,OAAO,EAAE;MAAEA,CAAC,EAADA,CAAC;MAAEC,CAAC,EAADA;IAAE,CAAE;IAClB,UAAU,EAAEH,UAAU,GAAGJ,UAAU,GAAGD,WAAY;IAClD,iBAAiB,EAAES,cAAe;IAClC,KAAK,oBAAOH,QAAQ;MAAEI,OAAO,EAAE,CAAC;MAAEC,OAAO,EAAE;IAAC,EAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAE/C;IAAM,SAAS,EAAC,UAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAEP,QAAQ,CAAQ,eAC5C;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAKD,KAAK,CAAM,CACL;AAEjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMM,cAAc,GAAG,SAAjBA,cAAc;EAAA,IAAMF,CAAC,SAADA,CAAC;IAAEC,CAAC,SAADA,CAAC;IAAEI,MAAM,SAANA,MAAM;IAAEC,MAAM,SAANA,MAAM;EAAA,wBAClCD,MAAM,sBAAYC,MAAM,yBAAeN,CAAC,eAAKC,CAAC;AAAA,CAAiB"},"metadata":{},"sourceType":"module"}